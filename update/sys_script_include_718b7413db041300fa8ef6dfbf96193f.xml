<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_79929_booking.ScheduleHelper</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>ScheduleHelper</name>
        <script><![CDATA[var ScheduleHelper = Class.create();
ScheduleHelper.prototype = {
	//
	initialize: function() {
		this.debug = 1; //1=logging enabled, 0=logging disabled
		gs.info('BOOKING debug: '+gs.getProperty('x_79929_booking.debug'));
		
		
	},
	
	//Generate schedule weeks
	generateScheduleDays: function(schedTemplate, regenerate){
		//If regenerate flag is set, delete all schedule slots from beginning
		//of tomorrow and regenerate from template. Else, only create future slots
		//where slots do not yet exist.
	try{	
		if (regenerate == 1){
			var oldSlot = new GlideRecord("x_79929_booking_booking_schedule");
			oldSlot.addQuery("schedule_template", schedTemplate.sys_id.toString());
			//oldSlot.addQuery("schedule_template", schedTemplate);
			oldSlot.addEncodedQuery("start_time>javascript:gs.daysAgoEnd(0)");
			oldSlot.deleteMultiple();
		}
		var dayInms = 86400000;  //1 day in milliseconds
		var numDays = schedTemplate.schedule_days;
		var now = new GlideDateTime();
		
		
		if (gs.getProperty('x_79929_booking.debug')=='True'){
		gs.info('BOOKING now: '+now);
		gs.info('BOOKING schedTemplate: '+schedTemplate.sys_id.toString());	
		gs.info('BOOKING numDays: '+numDays);	
		}	
			
		//Iterate through the next numDays, creating a schedule if it doesn't already exist
		for (var i = 0; i < numDays; i++) {
			var todayOfWeek = now.getDayOfWeekLocalTime();
			//var todayDateMidnight = now.getInternalMidnight(todayOfWeek);
			var gtime= new GlideTime();
			var gdt=new GlideDateTime().getDisplayValue();
			//var todayDateMidnight = gdt.subtract(gtime.getDisplayValue());
			var midnight = new GlideTime();
			midnight.setValue('00.00.00');
			var gd = new GlideDate().getDisplayValueInternal();
			var dateMidnight = new GlideDateTime(gd+midnight);
			var todayDateMidnight = new GlideDateTime(gd+' 00.00.00').getNumericValue();

			todayDateMidnight.subtract(1000); //Need to adjust down 1 second for even number
			
		if(gs.getProperty('x_79929_booking.debug')=='True'){
				gs.info('BOOKING todayDateMidnight: '+todayDateMidnight.getValue());
				gs.info('BOOKING gtime: '+gtime.getValue());
			gs.info('BOOKING dateMidnight: '+dateMidnight.getValue());
			}
			this._generateScheduleDay(schedTemplate, todayOfWeek, todayDateMidnight);
			now.add(dayInms);
		}
	}catch(gsd_err){
		//var message = gsd_err.getMessage();
	gs.error('BOOKING gsd_err: '+gsd_err.message);	
	}
	},
	
	//Generate full schedule template
	generateScheduleTemplateSlots: function(schedTemplate){
		if (gs.getProperty('x_79929_booking.debug')=='True'){
			gs.info('BOOKING **** Starting generation of slots for - ' + schedTemplate.title);
		}
		try{
		//Delete any existing template slots
		var oldSlots = new GlideRecord("x_79929_booking_booking_template_slot");
		oldSlots.addQuery("schedule_template", schedTemplate.sys_id.toString());
		//oldSlots.addQuery("schedule_template", schedTemplate);
		oldSlots.deleteMultiple();
		
		if (schedTemplate.monday == true)
			this._generateDayScheduleTemplateSlots('1', schedTemplate, schedTemplate.monday_price);
		if (schedTemplate.tuesday == true)
			this._generateDayScheduleTemplateSlots('2', schedTemplate, schedTemplate.tuesday_price);
		if (schedTemplate.wednesday == true)
			this._generateDayScheduleTemplateSlots('3', schedTemplate, schedTemplate.wednesday_price);
		if (schedTemplate.thursday == true)
			this._generateDayScheduleTemplateSlots('4', schedTemplate, schedTemplate.thursday_price);
		if (schedTemplate.friday == true)
			this._generateDayScheduleTemplateSlots('5', schedTemplate, schedTemplate.friday_price);
		if (schedTemplate.saturday == true)
			this._generateDayScheduleTemplateSlots('6', schedTemplate, schedTemplate.saturday_price);
		if (schedTemplate.sunday == true)
			this._generateDayScheduleTemplateSlots('7', schedTemplate, schedTemplate.sunday_price);
			
	}catch(gsts_err){
		//var message = gsts_err.getMessage();
	gs.error('BOOKING gsts_err: '+gsts_err.message);	
	}		
	},
	
	//Set old Reservations to no-show
	setOldResoNoShow: function(){
	try{	
		
		var oldReso = new GlideRecord("x_79929_booking_booking_reservation");
		oldReso.addEncodedQuery("end_time<javascript:gs.daysAgoStart(0)^state=reserved");
		oldReso.query();
		while (oldReso.next()) {
			oldReso.state = 'noshow';
			oldReso.update();
		}
	}catch(sorns_err){
	//var message = sorns_err.getMessage();
	gs.error('BOOKING sorns_err: '+sorns_err.message);	
	}
	},
	
	//Generate schedule for the given day and date
	_generateScheduleDay: function(schedTemplate, day, dateMidnight){
		 if (gs.getProperty('x_79929_booking.debug')=='True'){
			gs.info('BOOKING **** Generating schedule for day ' + dateMidnight.toString().split(" ")[0] + '(' + schedTemplate.start_time.getDisplayValue() + ' - ' + schedTemplate.end_time.getDisplayValue() + ')');
		}
		try{
		//Get start of week date
		var multiplier = day - 1;
		var msToSubtract = multiplier*86400000; //multipler * 1 day in milliseconds
		var backToStartDate = new GlideDateTime(dateMidnight);
		backToStartDate.subtract(msToSubtract);
		var startOfWeek = backToStartDate.getDate();
		
	//Determine if slots exist for this day, week, and template
		var existingSlots = this._daySlotsExist(startOfWeek, day, schedTemplate);
		
		if(gs.getProperty('x_79929_booking.debug')=='True'){
		gs.info('BOOKING multiplier: '+multiplier);	
		gs.info('BOOKING msToSubtract: '+msToSubtract);
		gs.info('BOOKING backToStartDate: '+backToStartDate);
		gs.info('BOOKING startOfWeek: '+startOfWeek);
		gs.info('BOOKING existingSlots: '+existingSlots);
		}
		
		
		//If no slots exist for this day, week, and template
		if (existingSlots == false){
			var schedTemplateSlot = new GlideRecord("x_79929_booking_booking_template_slot");
			schedTemplateSlot.addQuery("schedule_template", schedTemplate.sys_id.toString());
			//schedTemplateSlot.addQuery("schedule_template", schedTemplate);
			schedTemplateSlot.addQuery("day_of_week", day);
			schedTemplateSlot.orderBy("start_time");
			schedTemplateSlot.query();
			while (schedTemplateSlot.next()) {
				this._generateScheduleSlot(schedTemplateSlot, dateMidnight, day, startOfWeek);
			}
		}
	}catch(_gsd_err){
		//var message = _gsd_err.getMessage();
	gs.error('BOOKING _gsd_err: '+_gsd_err.message);	
	}
	},
	
	//Generate individual schedule slot
	_generateScheduleSlot: function(schedTemplateSlot, dateMidnight, day, startOfWeek){
		//Get numeric value of start time from template (always at 01/01/1970 non-DST)
	try{
		//var startTimeTemplate = schedTemplateSlot.start_time.getGlideObject().getNumericValue(); 
		//var endTimeTemplate = schedTemplateSlot.end_time.getGlideObject().getNumericValue();
		var startTimeTemplate = (new GlideDateTime(schedTemplateSlot.getValue('start_time'))).getNumericValue();		
		var endTimeTemplate = (new GlideDateTime(schedTemplateSlot.getValue('end_time'))).getNumericValue(); 
		if(gs.getProperty('x_79929_booking.debug')=='True'){
			gs.info('BOOKING STARTTIMETEMPLATE: '+startTimeTemplate);
			gs.info('BOOKING ENDTIMETEMPLATE: '+endTimeTemplate);
		}
		
		/*Check if currently DST - if so, adjust
		if (dateMidnight.isDST() == true){
			var adjustment = 3600000; //1 hour in milliseconds
			startTimeTemplate -= adjustment;
			endTimeTemplate -= adjustment;
		}
		*/
		//Generate today dates at midnight
		var startDateTime = new GlideDateTime(dateMidnight);
		var endDateTime = new GlideDateTime(dateMidnight);
		
		
		
		//Add start/end times from template
		startDateTime.add(startTimeTemplate);
		endDateTime.add(endTimeTemplate);
		
		if(gs.getProperty('x_79929_booking.debug')=='True'){
			gs.info('BOOKING startDateTime: '+startDateTime);
			gs.info('BOOKING endDateTime: '+endDateTime);
		}
		
		//Generate new slots
		var newSlot = new GlideRecord("x_79929_booking_booking_schedule");
		newSlot.initialize();
		newSlot.capacity = schedTemplateSlot.capacity;
		newSlot.start_time = startDateTime;
		newSlot.end_time = endDateTime;
		newSlot.day_of_week = day;
		newSlot.week_start = startOfWeek;
		newSlot.schedule_template = schedTemplateSlot.schedule_template.sys_id.toString();
		newSlot.schedule_template_slot = schedTemplateSlot.sys_id.toString();
		
	if (gs.getProperty('x_79929_booking.debug')=='True'){
		gs.info('BOOKING CAPACITY: '+newSlot.capacity);
		gs.info('BOOKING START_TIME2: '+newSlot.start_time);
		gs.info('BOOKING END_TIME2: '+newSlot.end_time);
		gs.info('BOOKING DAY_OF_WEEK: '+newSlot.day_of_week);
		gs.info('BOOKING WEEK_START: '+newSlot.week_start);
		gs.info('BOOKING TEMPLATE: '+newSlot.schedule_template);
		gs.info('BOOKING TEMPLATE_SLOT: '+newSlot.schedule_template_slot);
		}	
		
		//Add Price
		newSlot.price = schedTemplateSlot.u_price;
		
		var newSlotID = newSlot.insert();
		
		//Try to reassociate any existing reservations to this new slot
		this._reassociateResos(newSlotID);
}catch(_gss_err){
	//var message = _gss_err.getMessage();
	gs.error('BOOKING _gss_err: '+_gss_err.message);	
	}
	},
	
	//Check if schedule exists for provided date and time on template
	_daySlotsExist: function(startOfWeek, day, schedTemplate){
		var existingSlot = new GlideRecord("x_79929_booking_booking_schedule");
		existingSlot.addQuery("week_start", startOfWeek);
		existingSlot.addQuery("day_of_week", day);
		existingSlot.addQuery("schedule_template", schedTemplate.sys_id.toString());
		existingSlot.query();
		if (existingSlot.next())
			return true;
		return false;
	},
	
	//Check if any existing reservations fall into a created time slot
	//and, if so, associate those reservations to this time slot.
	_reassociateResos: function(slotID){
		var slotRec = new GlideRecord("x_79929_booking_booking_schedule");
		if (slotRec.get(slotID)) {
			//var slotBegin = slotRec.start_time.getGlideObject().getValue();
			//var slotEnd = slotRec.end_time.getGlideObject().getValue();
			var slotBegin = (new GlideDateTime(slotRec.getValue('start_time'))).getValue(); 
			var slotEnd = (new GlideDateTime(slotRec.getValue('end_time'))).getValue();
			
			//Generate query string to gather related reservations
			var query = 'start_time>=' + slotBegin + '^start_time<' + slotEnd + '^schedule_template=' + slotRec.schedule_template.sys_id.toString() + '^state=reserved^NQend_time<=' + slotEnd + '^end_time>' + slotBegin + '^schedule_template=' + slotRec.schedule_template.sys_id.toString() + '^state=reserved';
			var existingReso = new GlideRecord("x_79929_booking_booking_reservation");
			existingReso.addEncodedQuery(query);
			existingReso.query();
			while (existingReso.next()) {
				existingReso.schedule = slotID;
				existingReso.update();
			}
		}
		
	},
	
	//Generate individual day schedule template
	_generateDayScheduleTemplateSlots: function(day, schedTemplate, price){
		if (gs.getProperty('x_79929_booking.debug')=='True'){
			gs.info('BOOKING **** Generating template slots for day ' + day + '(' + schedTemplate.start_time.getDisplayValue() + ' - ' + schedTemplate.end_time.getDisplayValue() + ')');
		}
		
		try{
		
		//Gather needed variables
		var templateID = schedTemplate.sys_id.toString();
		var capacity = schedTemplate.capacity;
		var slotLength = parseInt(schedTemplate.reservation_length) * 60000; //slotLength in milliseconds
		
		//Gather start & end variables in milliseconds
		//var timeStart = schedTemplate.start_time.getGlideObject().getNumericValue();
		//var timeEnd = schedTemplate.end_time.getGlideObject().getNumericValue();
		var timeStart = (new GlideDateTime(schedTemplate.getValue('start_time'))).getNumericValue(); 
		var timeEnd = (new GlideDateTime(schedTemplate.getValue('end_time'))).getNumericValue();
		
			
	if (gs.getProperty('x_79929_booking.debug')=='True'){
			gs.info('BOOKING templateID: '+templateID);
			gs.info('BOOKING capacity: '+capacity);
			gs.info('BOOKING slotLength: '+slotLength);
			gs.info('BOOKING timeStart: '+timeStart);
			gs.info('BOOKING start_time: '+schedTemplate.getValue('start_time'));
			gs.info('BOOKING timeEnd: '+timeEnd);
			gs.info('BOOKING end_time: '+schedTemplate.getValue('end_time'));		
		}	
			
		//Using millisecond values, iterate from timeStart to timeEnd, incrementing by slotLength
		for (var time = timeStart; time < timeEnd; time+=slotLength) {
			this._generateTemplateSlot(day, time, slotLength, templateID, capacity, price);
		}
		
		}catch(_gdsts){
			gs.error('BOOKING _gdsts: '+_gdsts.message);
		}		
	
	},
	
	//Generate individual schedule slot template
	_generateTemplateSlot: function(day, time, slotLength, templateID, capacity, price){
		try{
		var newSlot = new GlideRecord("x_79929_booking_booking_template_slot");
		newSlot.initialize();
		newSlot.day_of_week = day;
		newSlot.start_time = new GlideTime(time);
		newSlot.end_time = new GlideTime(time + slotLength);
		newSlot.capacity = capacity;
		newSlot.schedule_template = templateID;
		newSlot.u_price = price;
		newSlot.insert();
		}catch(_gts){
			gs.error('BOOKING _gts: '+_gts.message);
		}
	},
	
	type: 'ScheduleHelper'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-02-08 05:06:29</sys_created_on>
        <sys_id>718b7413db041300fa8ef6dfbf96193f</sys_id>
        <sys_mod_count>118</sys_mod_count>
        <sys_name>ScheduleHelper</sys_name>
        <sys_package display_value="Booking" source="x_79929_booking">f1c5a787db001300fa8ef6dfbf961986</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Booking">f1c5a787db001300fa8ef6dfbf961986</sys_scope>
        <sys_update_name>sys_script_include_718b7413db041300fa8ef6dfbf96193f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-02-28 00:49:45</sys_updated_on>
    </sys_script_include>
</record_update>
